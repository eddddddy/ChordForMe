// Nocturne No. 20 in C# minor, Op. posth B.49
private List<Progression> chopinB49 = Arrays.asList(
        // 1-2
        new Progression(
                "minor",
                new Chord("minor", "tonic", 0),
                new Chord("minorSeventh", "tonic", 0),
                new Chord("minor", "subdominant", 0),
                new Chord("minor", "tonic", 0),
                new Chord("germanAugmentedSixth", "submediant", 0),
                new Chord("major", "dominant", 0)
        ),
        // 3-4 identical to 1-2
        // 5-8
        new Progression(
                "minor",
                new Chord("minor", "tonic", 0),
                new Chord("halfDiminishedSeventh", "supertonic", 3),
                new Chord("minor", "tonic", 0),
                new Chord("major", "tonic", 0),
                new Chord("halfDiminishedSeventh", "supertonic", 0)
        ),
        // 9-12
        new Progression(
                "minor",
                new Chord("major", "dominant", 1),
                new Chord("minor", "tonic", 0),
                new Chord("halfDiminishedSeventh", "supertonic", 2),
                new Chord("halfDiminishedSeventh", "supertonic", "dominantPedal"),
                new Chord("major", "dominant", 0),
                new Chord("halfDiminishedSeventh", "sharpenedSubmediant", 3),
                new Chord("major", "dominant", 0)
        ),
        // 13-16
        new Progression(
                "minor",
                new Chord("minor", "tonic", 0),
                new Chord("halfDiminishedSeventh", "supertonic", 3),
                new Chord("minor", "tonic", 0),
                new Chord("dominantSeventh", "tonic", 0),
                new Chord("minor", "subdominant", 0)
        ),
        // 17-20
        new Progression(
                "minor",
                new Chord("major", "flattenedSupertonic", 1),
                new Chord("diminishedSeventh", "sharpenedSubtonic", 2),
                new Chord("germanAugmentedSixth", "submediant", 3),
                new Chord("majorSeventh", "submediant", 3),
                new Chord("dominantNinth", "dominant", 0),
                new Chord("minor", "tonic", 0)
        ),
        // 21-24
        new Progression(
                "major",
                new Chord("major", "tonic", 0),
                new Chord("dominantSeventh", "dominant", "tonicPedal"),
                new Chord("major", "tonic", 0),
                new Chord("dominantSeventh", "dominant", "tonicPedal"),
                new Chord("major", "tonic", 0),
                new Chord("dominantSeventh", "dominant", "tonicPedal"),
                new Chord("major", "tonic", 0)
        ),
        // 25-28
        new Progression(
                "minor",
                new Chord("minor", "subdominant", 0),
                new Chord("dominantSeventh", "tonic", "subdominantPedal"),
                new Chord("minor", "subdominant", 0),
                new Chord("dominantSeventh", "dominant", 0),
                new Chord("minor", "tonic", 0),
                new Chord("dominantSeventh", "dominant", 0),
                new Chord("minor", "tonic", 0)
        ),
        // 29-30
        new Progression(
                "major",
                new Chord("dominantSeventhFlatFive", "dominant", 2),
                new Chord("augmentedMajorSeventh", "flattenedSubmediant", 1),
                new Chord("dominantSeventhFlatFive", "dominant", 2),
                new Chord("major", "tonic", 0)
        ),
        // 31-33
        new Progression(
                "major",
                new Chord("diminishedSeventh", "sharpenedSubdominant", 0),
                new Chord("augmentedMajorSeventh", "flattenedSubmediant", 3),
                new Chord("diminished", "sharpenedTonic", 2),
                new Chord("dominantSeventh", "dominant", 0),
                new Chord("major", "tonic", 0)
        ),
        // 34-37
        new Progression(
                "minor",
                new Chord("dominantSeventhFlatFive", "dominant", 2),
                new Chord("major", "tonic", 0),
                new Chord("minor", "mediant", 1),
                new Chord("dominantSeventh", "dominant", 0),
                new Chord("major", "tonic", 0)
        ),
        // 38-41 identical to 34-37
        // 42-43 identical to 36-37
        // 44-46 identical to 36-37 (with last chord extended by one measure)
        // 47-50 identical to 13-16
        // 51-54a
        new Progression(
                "minor",
                new Chord("dominantSeventh", "dominant", 1),
                new Chord("minor", "tonic", 0),
                new Chord("halfDiminishedSeventh", "supertonic", 2),
                new Chord("halfDiminishedSeventh", "supertonic", "dominantPedal"),
                new Chord("dominantSeventh", "dominant", 0)
                new Chord("diminishedSeventh", "sharpenedSubdominant", 0)
        ),
        // 54b-58a
        new Progression(
                "minor",
                new Chord("minorSeventh", "supertonic", 1),
                new Chord("dominantSeventh", "dominant", 0),
                new Chord("dominantSeventh", "dominant", 1),
                new Chord("minor", "tonic", 0),
                new Chord("halfDiminishedSeventh", "supertonic", 2),
                new Chord("halfDiminishedSeventh", "supertonic", "dominantPedal"),
                new Chord("dominantSeventh", "dominant", 0),
                new Chord("minor", "tonic", 0)
        ),
        // 58b-60a
        new Progression(
                "minor",
                new Chord("halfDiminishedSeventh", "supertonic", 3),
                new Chord("minor", "tonic", 0),
                new Chord("halfDiminishedSeventh", "supertonic", 3),
                new Chord("minor", "tonic", 0)
        ),
        // 60b-62a identical to 58b-60a
        // 62b-65
        new Progression(
                "minor",
                new Chord("halfDiminishedSeventh", "supertonic", 3),
                new Chord("minor", "tonic", 0),
                new Chord("halfDiminishedSeventh", "supertonic", 3),
                new Chord("major", "tonic", 0)
        )
);
